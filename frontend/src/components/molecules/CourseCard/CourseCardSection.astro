---
import CourseCardGrid from './CourseCardGrid.astro'
import CourseCard from './CourseCard.astro'
import Container from '@components/atoms/Container.astro'
import HeadingGroup from '../HeadingGroup.astro'
import Section from '@components/atoms/Section.astro'
import { getExamViaID, type CertificationExamType } from '@lib/sanity'
import type { HeadingSize } from 'bl-astro'
interface Props {
    heading?: string
    subheading?: string
    headingGroupSize?: HeadingSize
    width?: 'md' | 'lg'
    columnsAtFullWidth?: number
    courseCards?: CertificationExamType[] 
}

const { courseCards, heading, subheading , headingGroupSize="h1", width='md', columnsAtFullWidth=3} = Astro.props
let courseCardArray: CertificationExamType[] = []

async function fetchCards(){
    if (courseCards && courseCards.length > 0) {
    for (let card of courseCards) {
        const fetchedCard = await getExamViaID(card._ref)
        courseCardArray.push(fetchedCard)
    }}
}

await fetchCards()
---
<>
    <Container width={width} marginY={['md', 0]}>
        {heading && <HeadingGroup heading={heading} subheading={subheading} size={headingGroupSize} />}
    </Container>
    <Container width={width}>
        <CourseCardGrid width={width} columnsAtFullWidth={columnsAtFullWidth}>
            { courseCardArray && (courseCardArray.map((card) => 
                <CourseCard
                    type="certification"
                    title={card.title}
                    shortDescription={card.shortDescription}
                    ctaHref={card.slug.current}
                    badgeTag='practitioner'
                    format={card.details.examFormat}
                    durationMinutes={card.details.examDuration}
                    level={card.details.examLevel}
                    passingScore={card.details.examPassingScore}
                    priceUSD={card.details.examPrice}

                    />
            ))}
        </CourseCardGrid>
    </Container>
</>