---
import BareLayout from '../../layouts/BareLayout.astro'
import { getPages, getPage, getModuleViaKey } from '@lib/sanity'
import type { InferGetStaticParamsType } from 'astro'
import type {
  ModuleReference,
  HeroType,
  AnnouncementBannerType,
  CourseCardGridType,
} from '@lib/sanity'
import Text from '@components/atoms/Text.astro'
import Container from '@components/atoms/Container.astro'
import SquiggleSection from '@components/molecules/SquiggleSection.astro'
import Heading from '@components/atoms/Heading.astro'
import AnnouncementBanner from '@components/molecules/AnnouncementBanner.astro'
import Layout from '@layouts/Layout.astro'
import SanityImage from '@components/atoms/SanityImage.astro'
import Section from '@components/Section.astro'
import Link from '@components/Link.astro'
import Flex from '@components/atoms/Flex.astro'
import CourseCardSection from '@components/molecules/CourseCard/CourseCardSection.astro'


export async function getStaticPaths() {
  const pages = await getPages()

  return pages.map((page) => {
    return {
      params: {
        slug: page.slug?.current || '',
      },
    }
  })
}
type Params = InferGetStaticParamsType<typeof getStaticPaths>
const { slug } = Astro.params as Params
const page = await getPage(slug)
const modules: ModuleReference[] = page.modules


---

<Layout title={slug}>
  <BareLayout>
    <SquiggleSection bgImage={page.hero.image}>
      <Flex direction="column" gap="1rem">
      {
        page.hero.eyebrow && <Text weight={600}>{page.hero.eyebrow}</Text>
        }
      <Heading size='h2'>{page.hero.heading}</Heading>
    <Text>{page.hero.subheading}</Text>
    <!-- <Link variant={page.hero.ctas[0].variant} href={page.hero.ctas[0].externalLink} icon={page.hero.ctas[0].icon} arrow={page.hero.ctas[0].showArrow}>Learn More</Link> -->
    <Flex direction='row' gap='var(--space-sm)'>{page.hero.ctas && 
        page.hero.ctas.map((cta) =>
        (
          <Link variant={cta.variant} href={cta.externalLink} icon={cta.icon} arrow={cta.showArrow}>{cta.ctaText}</Link>
        )
      )
    }</Flex>
     </Flex>
    </SquiggleSection>
    <Section paddingY='md'>
      {
        modules.map((item: ModuleReference) => {
          switch (item._type) {
            case 'announcementBanner':
              const announcementBanner = item as AnnouncementBannerType
              return (
                <Container width={announcementBanner.width}>
                  <AnnouncementBanner
                    heading={announcementBanner.heading}
                    subheading={announcementBanner.subheading}
                    bgImage={announcementBanner.bannerImage}
                    cta={announcementBanner.cta.ctaText}
                    url={announcementBanner.cta.externalLink}
                    linkVariant={announcementBanner.cta.variant}
                    status={announcementBanner.statusFlag}
                  />
                  <SanityImage image={announcementBanner.bannerImage} />
                </Container>
              )
            case 'courseCardGrid':
              const grid = item as CourseCardGridType
              return (<CourseCardSection heading={grid.heading} subheading={grid.subheading} pageExams={grid.cardSection}></CourseCardSection>
)

            default:
              throw new Error(`Unknown module type: ${item._type}`)
          }
        })
      }
    </Section>
  
  </BareLayout>
</Layout>
<!-- 
<CourseCardGrid>
                {grid.cardSection && grid.cardSection.map((card) => (
                  <CourseCard
                    type={card.cardType}
                    title={card.title}
                    shortDescription={card.shortDescription}
                    ctaHref={card.slug}
                    durationMinutes={card.details.examDuration}
                    level={card.details.examLevel}
                    priceUSD={card.details.examPrice}

                  />
                ))}
                {!grid.cardSection && <Heading size="h3">Add courses!</Heading>} </CourseCardGrid> -->