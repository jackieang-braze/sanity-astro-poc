---
import BareLayout from '../../layouts/BareLayout.astro'
import { getPages, getPage } from '@lib/sanity'
import type { InferGetStaticParamsType } from 'astro'
import type {
  ModuleReference,
  AnnouncementBannerType,
  CourseCardSectionType,
  FullWidthBannerType,
  FAQSectionType,
  TestimonialSectionType,
} from '@lib/sanity'
import Text from '@components/atoms/Text.astro'
import Container from '@components/atoms/Container.astro'
import SquiggleSection from '@components/molecules/SquiggleSection.astro'
import Heading from '@components/atoms/Heading.astro'
import AnnouncementBanner from '@components/molecules/AnnouncementBanner.astro'
import Layout from '@layouts/Layout.astro'
import SanityImage from '@components/atoms/SanityImage.astro'
import Section from '@components/atoms/Section.astro'
import Link from '@components/atoms/Link.astro'
import Flex from '@components/atoms/Flex.astro'
import TestimonialSection from '@components/molecules/Testimonial/TestimonialSection.astro'
import CourseCardSection from '@components/molecules/CourseCard/CourseCardSection.astro'
import PortableText from '@components/portableText/PortableText.astro'
import FullWidthBanner from '@components/molecules/FullWidthBanner.astro'
import FAQSection from '@components/molecules/FAQ/FAQSection.astro'
import type { Colors } from 'bl-astro'
import { accessibleTextColor } from '@lib/accessibleTextColor'

export async function getStaticPaths() {
  const pages = await getPages()

  return pages.map((page) => {
    return {
      params: {
        slug: page.slug?.current || '',
      },
    }
  })
}
type Params = InferGetStaticParamsType<typeof getStaticPaths>
const { slug } = Astro.params as Params
const page = await getPage(slug)
const modules: ModuleReference[] = page.modules
const heroBgColor = page.hero.background.color.label.split(" ").join("-").toLowerCase() as Colors
const heroTextColor = accessibleTextColor(heroBgColor)
---

  <BareLayout>
    <SquiggleSection bgImage={page.hero.background.image} bgColor={heroBgColor}>
      <Flex direction="column" gap="var(--space-md)">
        <Flex direction='column' gap="1rem">
      {
        page.hero.eyebrow && <Text weight={600} size="md" color={heroTextColor}>{page.hero.eyebrow}</Text>
        }
      <Heading size='d2' color={heroTextColor}>{page.hero.heading}</Heading>
      <Text size="lg" color={heroTextColor}>{page.hero.subheading}</Text>
      </Flex>
    <Flex direction='row' gap='var(--space-sm)'>{page.hero.ctas && 
        page.hero.ctas.map((cta) =>
        (
          <Link variant={cta.variant} href={cta.externalLink} icon={cta.icon} arrow={cta.showArrow}>{cta.ctaText}</Link>
        )
      )
    }</Flex>
     </Flex>
    </SquiggleSection>
      {
        modules.map((item: ModuleReference) => {
          switch (item._type) {
            case 'announcementBanner':
              const announcementBanner = item as AnnouncementBannerType
              return (
                <Section>
                  <Container width={announcementBanner.width}>
                    <AnnouncementBanner
                      heading={announcementBanner.heading}
                      subheading={announcementBanner.subheading}
                      bgImage={announcementBanner.bannerImage}
                      cta={announcementBanner.cta.ctaText}
                      url={announcementBanner.cta.externalLink}
                      linkVariant={announcementBanner.cta.variant}
                      status={announcementBanner.statusFlag}
                    />
                    <SanityImage image={announcementBanner.bannerImage} />
                  </Container>
                </Section>
              )
            case 'courseCardSection':
              const section = item as CourseCardSectionType
              return (
              <Section paddingY='md'>
                  {section.content && section.content.map((grid) =>
                (
                  <CourseCardSection
                    heading={grid.gridHeading.heading}
                    subheading={grid.gridHeading.subheading}
                    headingGroupSize={grid.gridHeading.headingSize}
                    width={grid.width}
                    columnsAtFullWidth={grid.columnsAtFullWidth}
                    courseCards={grid.cardSection}
                />                 
                )
              )}
              </Section>)
            
            case 'testimonialSection':
              const testimonialSection = item as TestimonialSectionType
              return (
                    <TestimonialSection
                      heading={testimonialSection.testimonialHeading.heading}
                      subheading={testimonialSection.testimonialHeading.subheading}
                      bg={testimonialSection.backgroundColor}
                      cta={testimonialSection.testimonialCta}
                      testimonials={testimonialSection.testimonialCards}
                      columnsAtFullWidth={testimonialSection.columnsAtFullWidth}
                      />
                  
              )
            case 'fullWidthBanner':
              const banner = item as FullWidthBannerType
              const bgColor = banner.backgroundColor.label.split(" ").join("-").toLowerCase()
              return (
                <FullWidthBanner heading={banner.heading.heading} size={banner.heading.headingSize} ctas={banner.cta} width={banner.contentWidth} bgColor={bgColor}>
                  <PortableText portableText={banner.body} />
                </FullWidthBanner>
              )

            case 'faqSection':
              const faqSection = item as FAQSectionType
              return <FAQSection heading={faqSection.heading.heading} headingSize={faqSection.heading.headingSize} width="md" blocks={faqSection.content}/>

            default:
              throw new Error(`Unknown module type: ${item._type}`)
          }
        })
      }
  
  </BareLayout>
